"""Markdown documentation generator"""

import logging
from datetime import datetime
from typing import Any, Dict, List

from jinja2 import Template

from bidoc.utils import sanitize_filename, truncate_text


class MarkdownGenerator:
    """Generate Markdown documentation from extracted metadata"""

    def __init__(self):
        self.logger = logging.getLogger(__name__)

    def generate(self, metadata: Dict[str, Any]) -> str:
        """Generate Markdown documentation from metadata"""
        self.logger.debug("Generating Markdown documentation")

        # Determine file type and use appropriate template
        file_type = metadata.get("type", "Unknown")

        if file_type == "Power BI":
            return self._generate_powerbi_markdown(metadata)
        elif file_type == "Tableau":
            return self._generate_tableau_markdown(metadata)
        else:
            return self._generate_generic_markdown(metadata)

    def _generate_powerbi_markdown(self, metadata: Dict[str, Any]) -> str:
        """Generate Markdown for Power BI files"""
        template = Template(
            """# Documentation for {{ file_name }}

*Generated on {{ generation_date }}*

## Overview

**File Type:** {{ file_type }}  
**File Path:** `{{ file_path }}`

{% if ai_summary %}
## AI Summary

{{ ai_summary }}

{% endif %}
## Data Sources

{% for ds in data_sources %}
### {{ ds.name }}

- **Type:** {{ ds.type }}
- **Connection:** {{ ds.connection }}

{% endfor %}

## Tables and Fields

{% for table in tables %}
### {{ table.name }}

| Field Name | Data Type | Description |
|------------|-----------|-------------|
{% for column in table.columns %}| `{{ column.name }}` | {{ column.data_type }} | {{ column.description or '' }}{% if column.is_hidden %} *(Hidden)*{% endif %} |
{% endfor %}

{% if table.row_count %}**Estimated Rows:** {{ table.row_count }}{% endif %}

{% endfor %}

## Measures

{% for measure in measures %}
### {{ measure.name }}
{% if measure.table %}
**Table:** {{ measure.table }}  
{% endif %}
**Expression:**
```dax
{{ measure.expression }}
```

{% if measure.format_string %}**Format:** {{ measure.format_string }}{% endif %}
{% if measure.description %}**Description:** {{ measure.description }}{% endif %}
{% if measure.is_hidden %}**Hidden:** Yes{% endif %}

---

{% endfor %}

## Calculated Columns

{% for column in calculated_columns %}
### {{ column.name }}
{% if column.table %}
**Table:** {{ column.table }}  
{% endif %}
**Data Type:** {{ column.data_type }}  
**Expression:**
```dax
{{ column.expression }}
```

{% if column.description %}**Description:** {{ column.description }}{% endif %}
{% if column.is_hidden %}**Hidden:** Yes{% endif %}

---

{% endfor %}

## Relationships

{% for rel in relationships %}
- **{{ rel.from_table }}**[`{{ rel.from_column }}`] â†’ **{{ rel.to_table }}**[`{{ rel.to_column }}`]
  - Cardinality: {{ rel.cardinality }}
  - Active: {{ 'Yes' if rel.is_active else 'No' }}
  - Cross Filter: {{ rel.cross_filter_direction }}

{% endfor %}

## Report Structure

{% for page in visualizations %}
### Page: {{ page.page }}

{% for visual in page.visuals %}
#### {{ visual.title or visual.type }}
- **Type:** {{ visual.type }}
{% if visual.fields %}
- **Fields Used:** {% for field in visual.fields %}`{{ field }}`{% if not loop.last %}, {% endif %}{% endfor %}
{% endif %}

{% endfor %}
{% endfor %}

{% if power_query %}
## Power Query (M Code)

{% for query_name, query_code in power_query.items() %}
### {{ query_name }}

```m
{{ query_code }}
```

{% endfor %}
{% endif %}

---
*Documentation generated by BI Documentation Tool*
"""
        )

        return template.render(
            file_name=metadata.get("file", "Unknown"),
            file_type=metadata.get("type", "Unknown"),
            file_path=metadata.get("file_path", ""),
            generation_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            ai_summary=metadata.get("ai_summary", ""),
            data_sources=metadata.get("data_sources", []),
            tables=metadata.get("tables", []),
            measures=metadata.get("measures", []),
            calculated_columns=metadata.get("calculated_columns", []),
            relationships=metadata.get("relationships", []),
            visualizations=metadata.get("visualizations", []),
            power_query=metadata.get("power_query", {}),
        )

    def _generate_tableau_markdown(self, metadata: Dict[str, Any]) -> str:
        """Generate Markdown for Tableau files"""
        template = Template(
            """# Documentation for {{ file_name }}

*Generated on {{ generation_date }}*

## Overview

**File Type:** {{ file_type }}  
**File Path:** `{{ file_path }}`

{% if ai_summary %}
## AI Summary

{{ ai_summary }}

{% endif %}
## Data Sources

{% for ds in data_sources %}
### {{ ds.name }}

{% if ds.caption != ds.name %}**Caption:** {{ ds.caption }}{% endif %}

#### Connections
{% for conn in ds.connections %}
- **Type:** {{ conn.connection_type }}
- **Server:** {{ conn.server }}
- **Database:** {{ conn.database }}
{% if conn.port %}- **Port:** {{ conn.port }}{% endif %}
{% if conn.username %}- **Username:** {{ conn.username }}{% endif %}

{% endfor %}

#### Fields

| Field Name | Caption | Data Type | Role | Type | Calculated |
|------------|---------|-----------|------|------|------------|
{% for field in ds.fields %}| `{{ field.name }}` | {{ field.caption }} | {{ field.datatype }} | {{ field.role }} | {{ field.type }} | {{ 'Yes' if field.is_calculated else 'No' }} |
{% endfor %}

{% endfor %}

## Calculated Fields

{% for field in calculated_fields %}
### {{ field.name }}

**Data Source:** {{ field.datasource }}  
**Data Type:** {{ field.datatype }}  
**Role:** {{ field.role }}

**Calculation:**
```sql
{{ field.calculation }}
```

{% if field.description %}**Description:** {{ field.description }}{% endif %}

{% if field.worksheets_used %}
**Used in Worksheets:** {% for ws in field.worksheets_used %}`{{ ws }}`{% if not loop.last %}, {% endif %}{% endfor %}
{% endif %}

---

{% endfor %}

## Worksheets

{% for worksheet in worksheets %}
### {{ worksheet.name }}

{% if worksheet.data_source %}**Data Source:** {{ worksheet.data_source }}{% endif %}

{% if worksheet.fields_used %}
**Fields Used:** {% for field in worksheet.fields_used %}`{{ field }}`{% if not loop.last %}, {% endif %}{% endfor %}
{% endif %}

{% if worksheet.filters %}
**Filters:**
{% for filter in worksheet.filters %}
- {{ filter.field }}: {{ filter.value }}
{% endfor %}
{% endif %}

{% if worksheet.parameters_used %}
**Parameters Used:** {% for param in worksheet.parameters_used %}`{{ param }}`{% if not loop.last %}, {% endif %}{% endfor %}
{% endif %}

{% endfor %}

## Dashboards

{% for dashboard in dashboards %}
### {{ dashboard.name }}

**Contains Worksheets:** {% for ws in dashboard.worksheets %}`{{ ws }}`{% if not loop.last %}, {% endif %}{% endfor %}

{% if dashboard.objects %}
**Dashboard Objects:**
{% for obj in dashboard.objects %}
- {{ obj.type }}: {{ obj.name }}
{% endfor %}
{% endif %}

{% endfor %}

{% if parameters %}
## Parameters

{% for param in parameters %}
### {{ param.name }}

- **Data Type:** {{ param.datatype }}
{% if param.default_value %}- **Default Value:** {{ param.default_value }}{% endif %}
{% if param.allowable_values %}- **Allowed Values:** {% for val in param.allowable_values %}`{{ val }}`{% if not loop.last %}, {% endif %}{% endfor %}{% endif %}
{% if param.description %}- **Description:** {{ param.description }}{% endif %}

{% endfor %}
{% endif %}

{% if field_usage %}
## Field Usage Summary

| Field | Used in Worksheets |
|-------|-------------------|
{% for field, worksheets in field_usage.items() %}| `{{ field }}` | {% for ws in worksheets %}`{{ ws }}`{% if not loop.last %}, {% endif %}{% endfor %} |
{% endfor %}
{% endif %}

---
*Documentation generated by BI Documentation Tool*
"""
        )

        return template.render(
            file_name=metadata.get("file", "Unknown"),
            file_type=metadata.get("type", "Unknown"),
            file_path=metadata.get("file_path", ""),
            generation_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            ai_summary=metadata.get("ai_summary", ""),
            data_sources=metadata.get("data_sources", []),
            calculated_fields=metadata.get("calculated_fields", []),
            worksheets=metadata.get("worksheets", []),
            dashboards=metadata.get("dashboards", []),
            parameters=metadata.get("parameters", []),
            field_usage=metadata.get("field_usage", {}),
        )

    def _generate_generic_markdown(self, metadata: Dict[str, Any]) -> str:
        """Generate generic Markdown for unknown file types"""
        template = Template(
            """# Documentation for {{ file_name }}

*Generated on {{ generation_date }}*

## Overview

**File Type:** {{ file_type }}  
**File Path:** `{{ file_path }}`

## Raw Metadata

```json
{{ metadata_json }}
```

---
*Documentation generated by BI Documentation Tool*
"""
        )

        import json

        return template.render(
            file_name=metadata.get("file", "Unknown"),
            file_type=metadata.get("type", "Unknown"),
            file_path=metadata.get("file_path", ""),
            generation_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            metadata_json=json.dumps(metadata, indent=2, default=str),
        )
